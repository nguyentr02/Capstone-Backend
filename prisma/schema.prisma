generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARTICIPANT
  ORGANIZER
  ADMIN
}

enum EventType {
  SPORTS
  MUSICAL
  SOCIAL
  VOLUNTEERING
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  ACTIVE
  INACTIVE
  SOLD_OUT
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CHECKBOX
  DROPDOWN
  DATE
  EMAIL
  PHONE
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  phoneNo   String?  @map("phone_no")
  role      UserRole @default(PARTICIPANT)
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  organizedEvents Event[]        @relation("EventOrganizer")
  registrations   Registration[]
  participants Participant[] 

  @@map("users")
}

model Event {
  id            Int         @id @default(autoincrement()) @map("id")
  organiserId   Int         @map("organiser_id")
  name          String
  description   String?     @db.Text
  location      String
  capacity      Int
  eventType     EventType   @map("event_type")
  isFree        Boolean     @default(false) @map("is_free")
  startDateTime DateTime    @map("start_datetime")
  endDateTime   DateTime    @map("end_datetime")
  status        EventStatus @default(DRAFT)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  organizer      User             @relation("EventOrganizer", fields: [organiserId], references: [id])
  tickets        Ticket[]
  registrations  Registration[]
  eventQuestions EventQuestions[]

  @@map("events")
}

model Question {
  id              Int          @id @default(autoincrement()) @map("id")
  questionText    String       @map("question_text") @db.Text
  questionType    QuestionType @default(TEXT) @map("question_type")
  category        String?
  validationRules Json?        @map("validation_rules")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relations
  eventQuestions EventQuestions[]

  @@map("questions")
}

model EventQuestions {
  id           Int     @id @default(autoincrement()) @map("id")
  eventId      Int     @map("event_id")
  questionId   Int     @map("question_id")
  isRequired   Boolean @default(false) @map("is_required")
  displayOrder Int     @map("display_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //Relations
  event     Event      @relation(fields: [eventId], references: [id])
  question  Question   @relation(fields: [questionId], references: [id])
  responses Response[]

  @@map("event_questions")
}

model Response {
  id             Int    @id @default(autoincrement()) @map("id")
  registrationId Int    @map("registration_id")
  eqId           Int    @map("eq_id")
  responseText   String @map("response_text") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  registration  Registration   @relation(fields: [registrationId], references: [id])
  eventQuestion EventQuestions @relation(fields: [eqId], references: [id])

  @@map("responses")
}

model Participant {
  id            Int          @id @default(autoincrement()) @map("id")
  email         String       
  firstName     String       @map("first_name")
  lastName      String       @map("last_name")
  phoneNumber    String?   @map("phone_number")
  dateOfBirth    DateTime? @map("date_of_birth")
  address        String?
  city           String?
  state          String?
  zipCode        String?   @map("zip_code")
  country        String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  registrations  Registration[]
  userId         Int?      @map("user_id") // Optional link to user account
  user           User?     @relation(fields: [userId], references: [id])

  @@unique([email])
  @@index([city, state, country])
  @@map("participants")
}

model Registration {
  id                Int                @id @default(autoincrement()) @map("id")
  eventId           Int                @map("event_id")
  participantId     Int                @map("participant_id")
  userId            Int?               @map("user_id")
  status            RegistrationStatus @default(PENDING)

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  // Relations
  
  event     Event      @relation(fields: [eventId], references: [id])
  participant Participant @relation(fields: [participantId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])
  purchase  Purchase?
  responses Response[]

  @@map("registrations")
}

model Ticket {
  id            Int          @id @default(autoincrement()) @map("id")
  eventId       Int          @map("event_id")
  name          String
  description   String?      @db.Text
  price         Decimal      @db.Decimal(10, 2)
  quantityTotal Int          @map("quantity_total")
  quantitySold  Int          @default(0) @map("quantity_sold")
  salesStart    DateTime?    @map("sales_start")
  salesEnd      DateTime?    @map("sales_end")
  status        TicketStatus @default(ACTIVE)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  event     Event      @relation(fields: [eventId], references: [id])
  purchases Purchase[]

  @@map("tickets")
}

model Purchase {
  id             Int     @id @default(autoincrement()) @map("id")
  registrationId Int     @unique @map("registration_id")
  ticketId       Int     @unique @map("ticket_id")
  quantity       Int
  unitPrice      Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice     Decimal @map("total_price") @db.Decimal(10, 2)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id])
  ticket       Ticket       @relation(fields: [ticketId], references: [id])
  payment      Payment?

  @@map("purchases")
}

model Payment {
  id            Int           @id @default(autoincrement()) @map("id")
  purchaseId    Int           @unique @map("purchase_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  status        PaymentStatus @default(PENDING) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  purchase Purchase @relation(fields: [purchaseId], references: [id])

  @@map("payments")
}
